@model ProjetoCEEM.ViewModels.CadastroViewModel
@{
    ViewBag.Title = "Cadastrar";
    Layout = "~/Views/Shared/_LayoutAdministrativa.cshtml";
}



@{
    if (TempData["message"] != null)
    {
        <script type="text/javascript">

            var texto = @Html.Raw(Json.Encode(TempData["message"]));
            setTimeout(function Mensagem() {
                swal({
                    title: "Sucesso",
                    text: texto,
                    type: "success",
                    confirmButtonText: "OK"
                },
                    function (isConfirm) {
                        if (isConfirm) {
                            window.location.href = "../../";
                        }
                    });
            }, 500);
        </script>
    }
}

<div class="preloader">
    <svg class="circular" viewBox="25 25 50 50">
        <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10" />
    </svg>
</div>
<!-- Main wrapper  -->
<div id="main-wrapper">
    <!-- Page de cadastro  -->
    <!-- Container de Cadastro  -->

    <div class="container-fluid">
        <br /><br />
        <div class="panel-title text-center">
            <a class="no-text-decoration" href="@Url.Action("Index","Home")">
                <img src="@Url.Content("~/images/CEEM/Logo_vFinal_v2.png")" width="250" height="80" alt="" />
            </a>
        </div>


        <!-- Inicio da página de cadastro -->
        <div id="imgBackGround">
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-body">
                            @using (Html.BeginForm("Cadastrar", "Cadastros"))
                            {
                                @Html.AntiForgeryToken()

                                <div class="row col-lg-12">
                                    <div class="col-lg-6">
                                        <label class="col-form-label" for="val-username">Nome Completo <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.NomeCompleto, new { htmlAttributes = new { @class = "form-control", placeholder = "Digite seu nome completo" } })
                                        @Html.ValidationMessageFor(model => model.NomeCompleto, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-6">
                                        <label class="col-form-label" for="val-email">Email <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Digite um email válido" } })
                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row col-lg-12">
                                    <div class="col-lg-4">
                                        <label class="col-form-label" for="val-username">Nome de Usuário <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.NomeUsuario, new { htmlAttributes = new { @class = "form-control", placeholder = "Digite um nome de usuário" } })
                                        @Html.ValidationMessageFor(model => model.NomeUsuario, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-4">
                                        <label class="col-form-label" for="val-email">Senha <span class="text-danger">* </span><span id="forcaSenha"></span></label>
                                        <input hidden id="InputForcaSenha" name="InputForcaSenha" value=0 />
                                        @Html.EditorFor(model => model.Senha, new { htmlAttributes = new { @class = "form-control", placeholder = "Escolha uma senha", oninput = "verifica()", onfocusout = "comparaSenha()" } })
                                        @Html.ValidationMessageFor(model => model.Senha, "", new { @class = "text-danger" })
                                        <span id="senhaComparada" class="text-danger"></span>
                                    </div>

                                    <div class="col-lg-4">
                                        <label class="col-form-label" for="val-email">Confirmar Senha <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.ConfirmarSenha, new { htmlAttributes = new { @class = "form-control", placeholder = "Repita sua senha", onfocusout = "comparaSenha()" } })
                                        @Html.ValidationMessageFor(model => model.ConfirmarSenha, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row col-lg-12">
                                    <div class="col-lg-4">
                                        <label class="col-form-label">CEP <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.Cep, new { htmlAttributes = new { @class = "form-control cep", onblur = "pesquisacep(this.value)", placeholder = "Digite seu CEP" } })
                                        @Html.ValidationMessageFor(model => model.Cep, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-8">
                                        <label class="col-form-label">Rua <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.Rua, new { htmlAttributes = new { @class = "form-control", placeholder = "Digite o nome de sua rua" } })
                                        @Html.ValidationMessageFor(model => model.Rua, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row col-lg-12">

                                    <div class="col-lg-9">
                                        <label class="col-form-label">Bairro <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "form-control", placeholder = "Digite o nome do seu bairro" } })
                                        @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-3">
                                        <label class="col-form-label">Nº <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control", placeholder = "Digite o número" } })
                                        @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row col-lg-12">
                                    <div class="col-lg-5">
                                        <label class="col-form-label">Complemento <span class="text-danger"></span></label>
                                        @Html.EditorFor(model => model.Complemento, new { htmlAttributes = new { @class = "form-control", placeholder = "Digite o complemento" } })
                                        @Html.ValidationMessageFor(model => model.Complemento, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-4">
                                        <label class="col-form-label">Cidade <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.Cidade, new { htmlAttributes = new { @class = "form-control", placeholder = "Digite o nome de sua cidade", @readonly = "true" } })
                                        @Html.ValidationMessageFor(model => model.Cidade, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-3">
                                        <label class="col-form-label">UF <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.Uf, new { htmlAttributes = new { @class = "form-control", placeholder = "UF", maxlength = "2", @readonly = "true" } })
                                        @Html.ValidationMessageFor(model => model.Uf, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row col-lg-12">
                                    <div class="col-lg-4">
                                        <label class="col-form-label">Telefone <span class="text-danger"></span></label>
                                        @Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control telefone", placeholder = "Digite seu telefone" } })
                                        @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-4">
                                        <label class="col-form-label">Celular</label>
                                        @Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control celular", placeholder = "Digite seu celular" } })
                                        @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-lg-4">
                                        <label class="col-form-label">Data de Nascimento <span class="text-danger">*</span></label>
                                        @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                                        @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row col-lg-12 form-group">
                                    <div class="col-lg-6">
                                        <label class="col-form-label">Pergunta de Segurança<span class="text-danger"> *</span></label>
                                        @Html.DropDownList("PerguntaSegurancaId", null, new { @class = "form-control" })
                                    </div>

                                    <div class="col-lg-6">
                                        <label class="col-form-label">Resposta<span class="text-danger"> *</span></label>
                                        @Html.EditorFor(model => model.Resposta, new { htmlAttributes = new { @class = "form-control", placeholder = "Insira a resposta da pergunta" } })
                                        @Html.ValidationMessageFor(model => model.Resposta, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row col-lg-12 form-group">
                                    <div class="col-md-2">
                                        <button type="submit" class="btn btn-success" style="background-color: #28a745; border-color: #28a745" onclick="return validateData();">Enviar</button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div> <!--Fim da página de cadastro -->
</div>

<script>
    function verifica() {
        const senha = document.getElementById("Senha").value;
        let forca = 0;
        const mostra = document.getElementById("forcaSenha");
        if ((senha.length >= 4) && (senha.length <= 7)) {
            forca += 10;
        } else if (senha.length > 7) {
            forca += 25;
        }
        if (senha.match(/[a-z]+/)) {
            forca += 10;
        }
        if (senha.match(/[A-Z]+/)) {
            forca += 20;
        }
        if (senha.match(/d+/)) {
            forca += 20;
        }
        if (senha.match(/\W/)) {
            forca += 25;
        }
        return mostra_res(mostra, forca);
    }
    function mostra_res(mostra, forca) {
        const inputForcaSenha = document.getElementById('InputForcaSenha');
        console.log(forca);
        if (forca <= 0) {
            mostra.innerHTML = '';
        } else if (forca < 30) {
            mostra.innerHTML = 'Fraca';
            mostra.style.color = 'red';
        } else if ((forca >= 30) && (forca < 60)) {
            mostra.innerHTML = 'Justa';
            mostra.style.color = 'yellow';
        } else if ((forca >= 60) && (forca < 85)) {
            mostra.innerHTML = 'Forte';
            mostra.style.color = 'blue';
        } else {
            mostra.innerHTML = 'Excelente';
            mostra.style.color = 'green';
        }
        inputForcaSenha.value = forca;
    }
    function comparaSenha() {
        const input1 = document.getElementById('Senha').value || ''
        console.log(input1)
        const input2 = document.getElementById('ConfirmarSenha').value || ''
        console.log(input1 === input2)
        if (input1 === input2) {
            document.getElementById('senhaComparada').innerHTML = '';
        } else {
            document.getElementById('senhaComparada').innerHTML = 'As senhas não correspondem';
        }
    } verifica()
</script>